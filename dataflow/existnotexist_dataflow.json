{
	"name": "existnotexist_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ForderivedColumn_dataset",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "departmentData_ForDataFlow",
						"type": "DatasetReference"
					},
					"name": "Departments"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outPut_DataSet",
						"type": "DatasetReference"
					},
					"name": "DepartmetIdNotExist"
				}
			],
			"transformations": [
				{
					"name": "NotExist"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpId as string,",
				"          EmpName as string,",
				"          Gender as string,",
				"          Contact as string,",
				"          Education as string,",
				"          DepartmentId as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          DepartmentId as string,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Departments",
				"Employees, Departments exists(Employees@DepartmentId == Departments@DepartmentId,",
				"     negate:true,",
				"     broadcast: 'auto')~> NotExist",
				"NotExist derive(Country = iif(isNull(Country), 'Unknown', Country)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['DepartmentsNotExist.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DepartmetIdNotExist"
			]
		}
	}
}